// HWL commonly used structs in WWise soundbanks

#ifndef COMMON_H
#define COMMON_H

enum <int> ObjectSoundEmbedOrStream
{
	Embedded=0,
	Streamed=1,
	StreamedZeroLatency=2,
};

enum <byte> ObjectSoundType
{
	SFX=0,
	Voice=1,
};

enum <uint> Curve_Shape
{
	Logarithmic_Base3 = 0, // (Base 3)
	Sine_FadeIn = 1, // (Constant Power Fade In)
	Logarithmic_Base141 = 2, // (Base 1.41)
	Inverted_S_Curve = 3,
	Linear = 4,
	S_Curve = 5,
	Exponential_Base141 = 6, // (Base 1.41)
	Sine_FadeOut = 7, // (Constant Power Fade Out)
	Exponential_Base3 = 8, // (Base 3)
	Constant = 9
};

enum <uint> Curve_ShapeInvert
{
    InvertExponentialBase3=0,
    InvertSineConstantPowerFadeOut=1,
    InvertExponentialBase141=2,
    InvertInvertedSCurve=3,
    InvertLinear=4,
    InvertSCurve=5,
    InvertLogarithmicBase141=6,
    InvertSineConstantPowerFadeIn=7,
    InvertLogarithmicBase3=8,
    InvertConstant=9,
};

struct SourceInfo
{
	uint pluginID <comment="Unknown purpose">; // pluginID according to the integration demo
	ObjectSoundEmbedOrStream embedOrStream;
	uint sourceID <fgcolor = 0x00FF00>;
	uint uFileID <comment="If streamed, same as sourceID. If embedded, the soundBankId.">;

	local uint pluginIDFlag15 = pluginID & 0xF;

	Printf("Source ID: %u\n", sourceID);
	Printf("uFile ID: %u", uFileID);
	Printf("\n");
	if (embedOrStream==Embedded)
	{
		int offsetToSoundFile;
		int lengthOfSoundFile;
	}
	else if (embedOrStream==StreamedZeroLatency)
	{
		// HWL always zero from what i can tell
		FSkip(4);

		// HWL the Prefetch length (ms) setting is ignored in the end, and this
		// offset is what's actually saved.
		uint offset_to_wem_data <comment="An offset that goes backwards in the file, to the WEM data, starting just before the HIRC section">;
		//FSkip(1);
	}
	ObjectSoundType soundType;

	// if i'm not mistaken, this is checked at the end of CAkBankMgr::LoadSource()
	if (pluginIDFlag15 == 5 || pluginIDFlag15 == 2) // from the integration demo
		uint bankSourceDataSize <fgcolor = 0x00BBBB>; // sets the m_uSize to this uint in the AkBankSourceData object
};

enum <byte> Boolean
{
	is_false = 0,
	is_true = 1,
};

enum <int> Boolean32
{
	_is_false = 0,
	_is_true = 1,
};

enum <byte> GroupType
{
	SwitchGroup = 0x00,
	StateGroup = 0x01,
	
};

enum <byte> SoundStrctureParameterType
{
	GeneralSettingsVoiceVolume=0,
	GeneralSettingsVoicePitch=2,
	GeneralSettingsVoiceLowPassFilter=3,
	GeneralSettingsAudioBusVolume=4,
	AdvancedSettingsPlaybackPriorityPriority=5, // this is the playback speed!
	AdvancedSettingsPlaybackPriorityOffsetPriorityByMaxDistance=6,
	Loop=7,
	MotionAudioToMotionSettingsMotionVolumeOffset=8,
	Positioning2DPannerXCoordinate=11,
	Positioning2DPannerXCoordinate2=12,
	PositioningCenterPercent=13,
	GeneralSettingsUserDefinedAuxillarySendsBus0Volume=18,
	GeneralSettingsUserDefinedAuxillarySendsBus1Volume=19,
	GeneralSettingsUserDefinedAuxillarySendsBus2Volume=20,
	GeneralSettingsUserDefinedAuxillarySendsBus3Volume=21,
	GeneralSettingsGameDefinedAuxillarySendsVolume=22,
	GeneralSettingsOutputBusVolume=23,
	GeneralSettingsOutputBusLowPassFilter=24,
	
	// newer effect as of Wwise 2013!
	InitialDelay = 25,
	
	// these are used in Audio Busses.
	HDR_Dynamics_Threshold = 26,
	HDR_Dynamics_Ratio = 27,
	HDR_Dynamics_ReleaseTime = 28,
	Window_TopOutput_GameParameter_ID = 29,
	Window_TopOutput_GameParameter_Min = 30,
	Window_TopOutput_GameParameter_Max = 31,
};

struct ArrayGraphPoints
{
	float x, y;
    local float yDb = LinearTodB(y);
	Curve_Shape CurveShapeType <comment="NOTE: these points work differently if the Y axis effect is set to 'Positioning Type'.">;
};

float LinearTodB(float linear)
{
    if (linear==1.0)
    {
        return 200.0;  
    }
    else if (linear==-1.0)
    {
        return -200.0;  
    };
    if (linear>=0)
    {
        return dbDecode(linear);
    }
    else
    {
        return -dbDecode(-linear);
    };
};

float dbDecode(float x)
{
    return -20.0 * Log(1.0 - x) / Log(10.0);
};

float dBtoLinear(float db)
{
    if (db>=0)
    {
        return dbEncode(x);
    }
    else
    {
        return -dbEncode(-x);
    };
};

float dbEncode(float x)
{
    return Exp(Log(10) * Â±1.0/20 * x);
};

struct CurveDefinition
{
    enum <ubyte> AkCurveScaling
    {
    	AkCurveScaling_None,
    	AkCurveScaling_dB,
    	AkCurveScaling_Log,
    	AkCurveScaling_dBToLin
    } curve_scaling;
    
    ushort num_of_points;
    local uint curNumPoints;
    for (curNumPoints = 0; curNumPoints < num_of_points; curNumPoints++)
    {
        ArrayGraphPoints curve_shape;
    }
};

struct RTPCCurve
{
    uint x_axis_game_param_name <comment="Fnv132 Hash">;  Printf("HASH-rtpc=%u\n",x_axis_game_param_name);
    //rlc this changes to a different 1-4 enum in effect/custom
    enum <uint> Y_Axis_Effect_Type
    {
    	Voice_Volume = 0,
    	Voice_Pitch = 2,
    	Voice_Low_Pass_Filter = 3,
    	// newer effect as of Wwise 2013!
        Duration = 5,
    	Initial_Delay = 6,
    	Priority = 8,
    	Sound_Instance_Limit = 9,
    	// newer effect as of Wwise 2013!
    	Positioning_Type = 10,
    	Cone_Max_Attenuation = 13,
    	Cone_Low_pass_Filter = 14,
    	User_Defined_Auxiliary_Sends_Volume_Zero = 0x0F,
    	User_Defined_Auxiliary_Sends_Volume_One = 0x10,
    	User_Defined_Auxiliary_Sends_Volume_Two = 0x11,
    	User_Defined_Auxiliary_Sends_Volume_Three = 0x12,
    	Game_Defined_Auxiliary_Sends_Volume = 0x13,
    	Output_Bus_Volume = 0x16,
    	Output_Bus_Low_pass_Filter = 0x17,
    	Bypass_Effect_Zero = 0x18,
    	Bypass_Effect_One = 0x19,
    	Bypass_Effect_Two = 0x1A,
    	Bypass_Effect_Three = 0x1B,
    	Bypass_All_Effects = 0x1C,
    	Motion_Volume_Offset = 0x1D,
    	Motion_Low_Pass = 0x1E,
    	// newer effects as of Wwise 2013!
    	HDR_Active_Range = 0x23,
    	Make_Up_Gain = 0x24
    } y_axis_effecttype;
	uint curveID;
    CurveDefinition rtpcCurveDefinition;
};

struct RTPC
{
    ushort num_of_RTPC_effects;
	local uint curRTPC_effects;
	for (curRTPC_effects = 0; curRTPC_effects < num_of_RTPC_effects; curRTPC_effects++)
	{
		RTPCCurve rtpc_effect;
	}
};

enum <ubyte> ContainerPlayMode
{
    CONTAINER_PLAY_STEP=0x0,    
    CONTAINER_PLAY_CONTINUOUS=0x1,
};

#endif
