// HWL used for the music switch containers structure

enum <byte> Answer
{
	No = -1,
	Yes = 0
};

enum <uint16> Sync
{
	_Entry_Cue = 0,
	_Same_As_Playing_Segment = 1,
	_Random_Cue = 2,
	_Random_Custom_cue = 3 // see custom cue filter
};

enum <byte> AnswerOpposite
{
	_No = 0,
	_Yes = -1,
};

enum <byte> CustomCueFilterSetting
{
	Match_Hash = 0,
	Match_Source_Cue_Name = 1,
};

struct TransitionObject
{
	Boolean allocateTransObject;
	if (allocateTransObject == is_true)
	{
		uint segmentID;
		struct FadeInSettings
		{
			int fadeIn_transitionTime;
			Curve_Shape fadeIn_fadeCurve;
			int fadeIn_fadeOffset; // time converted from millisecs to samples
		} fadeinsettings;

		struct FadeOutSettings
		{
			int fadeOut_transitionTime;
			Curve_Shape fadeOut_fadeCurve;
			int fadeOut_fadeOffset;
		} fadeoutsettings;
		AnswerOpposite play_transition_preentry;
		AnswerOpposite play_transition_postexit;
	}
};

struct TransitionRule
{
	uint sourceIDCount; // an AkArray is reserved with reserved amount "sourceID"
	if (sourceIDCount > 0)
	{
		uint sourceIDs[sourceIDCount];
	}
	uint destIDCount; // destination IDs, an AkArray also created here with
					// "destIDCount" for reserved space
	if (destIDCount > 0)
	{
		uint destIDs[destIDCount];
	}

	struct SrcRule
	{
		int fadeOutTime;
		Curve_Shape curveShape;
		int fadeOutOffset <comment="Milliseconds">;
		enum <uint> Changes_Occur_At_Uint
		{
			_Immediate = 0,
			_Next_Grid = 1,
			_Next_Bar = 2,
			_Next_Beat = 3,
			_Next_Cue = 4,
			_Custom_Cue = 5,
			__Entry_Cue = 6,
			__Exit_Cue = 7,
		} exit_source;
		int field_0xc;
		ubyte moreFlags;
	} srcrule;

	struct DestRule
	{
		int fadeInTime <comment="Milliseconds">;
		Curve_Shape curveShapeFadeIn;
		int fadeInOffset <comment="Milliseconds">;
		int custom_cue_filter_name_hash;
		uint jumpToID;
		Sync sync_to;
		AnswerOpposite play_preentry;
		CustomCueFilterSetting customcuefiltersetting;
		TransitionObject transobject;
	} destrule;
};

struct Transitions
{
	uint transRulesCount;
	if (transRulesCount > 0)
	{
		local int i;
		for (i = 0; i < transRulesCount; i++)
		{
			TransitionRule transrule;
		}
	}
};

struct StateSwitchGroupList
{
	uint num_of_stateswitch_groups;
	if (num_of_stateswitch_groups > 0)
	{
		uint stateswitch_group_IDs[num_of_stateswitch_groups];
        local int i;
        for (i=0;i<num_of_stateswitch_groups;i++)
        {
            Printf("HASH-stateGroup=%u\n",stateswitch_group_IDs[i]);    
        }
		GroupType grouptype[num_of_stateswitch_groups];
	}
};

struct DecisionTree
{
	int decisionTreeArgument1;
	ubyte decisionTreeMode;

	if (decisionTreeArgument1 != 0)
	{
		struct DecisionTreeNode
		{
			uint key; Printf("HASH-state=%u\n",key);
			union Node_u_4
			{
				struct Children
				{
					ushort uldx, uCount;
				} children;
				uint audioNodeID <bgcolor = 0xDD0000>;
			} nodeu4;
			ushort weight, probability;
		} decisiontreenodes[decisionTreeArgument1 / 12];
	}
};
