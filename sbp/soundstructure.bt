// All the stuff used for the SoundStructure, including the struct itself

#ifndef SOUNDSTRUCTURE_H
#define SOUNDSTRUCTURE_H

#include "common.bt"

enum <byte> CoordinateDimension
{
	Pos2D=0,
	Pos3D=1,
};

enum <uint> PositionSourceType
{
	UserDefined=2,
	GameDefined=3,
};

enum <uint> PlayType
{
	SequenceStep=0,
	RandomStep=1,
	SequenceContinuous=2,
	RandomContinuout=3,
	SequenceStepPickNewPathWhenStarts=4,
	RandomStepPickNewPathWhenStarts=5,
};

#include "common.bt"

// ===================
// The structure here
// ===================
struct SoundStructure
{
	Boolean overrideParentSettings;
	
	// HWL todo 21-10-12: find a better way to organize this effect
	// struct, just like how it's done in Audio Bus.
	// EDIT: the one in Audio Bus had mistakes, so this is actually
	// the better one.
	struct Effects
	{
		ubyte effectsCount;
		if (effectsCount > 0)
		{
			enum <byte> EffectBypassBitMask
			{
				BYPASS_NO_EFFECT = 0x00000000,
				BYPASS_EFFECT_0 = 0x00000001,
				BYPASS_EFFECT_1 = 0x00000010,
				BYPASS_EFFECT_2 = 0x00000100,
				BYPASS_EFFECT_3 = 0x00001000,
				BYPASS_ALL = 0x00010000
			} effectBypassBitmask;
		}
		
		struct SoundStrctureEffects
		{
			byte effectIndex;
			uint effectObjectId;
			ubyte isUseShareSets;
			ubyte isRender;
		}; 
		if (effectsCount > 0)
			SoundStrctureEffects soundstructure_effects[effectsCount] <optimize=false>;
	} effects;
	
	uint outputBusId;
	uint parentObjectId <bgcolor = 0xDED272>;
	
	// for printing to console
	Printf("Parent ID: %u\n", parentObjectId);
	Printf("Output Bus ID: %u\n", outputBusId);
	
	Boolean overrideSettingsForPlaybackPriority;
	Boolean activateOffsetPriorityByDistanceSetting;
	ubyte additionalParametersCount;
	
	struct AdditionalParameters
	{
		if (additionalParametersCount > 0)
		{
			SoundStrctureParameterType additionalParameters[additionalParametersCount];
		}
		
		local int index;
		for (index = 0; index < additionalParametersCount; index++)
		{
			if (additionalParameters[index]==7)
				uint32 parameterValueInt;
			else
				float parameterValueFloat;
		}
	};
	if (additionalParametersCount > 0) 
		AdditionalParameters additionalparameters;
	
	//Boolean includePositioningSection;
	ubyte additionalRandomizerParametersCount;
	if (additionalRandomizerParametersCount > 0)
	{
		struct Randomizer
		{
			SoundStrctureParameterType Parameters[additionalRandomizerParametersCount];
			struct RandomizerMinMax
			{
				//SoundStrctureParameterType Parameter;
				float min;
				float max;
			} randomizerminmax[additionalRandomizerParametersCount];
		} randomizer;
	}
	/*
	if (includePositioningSection == is_true)
	{
		CoordinateDimension coordinateDimension;
		if (coordinateDimension == Pos2D)
			Boolean enablePanner;
		else if (coordinateDimension == Pos3D)
		{
			PositionSourceType positionSourceType;
			uint attenuationObjectId;
			Boolean enableSpatialization;
			if (positionSourceType == UserDefined)
			{
				PlayType playType;
				Boolean isLoop;
				uint transitionTime;
				Boolean followListenerOrientation;
			}
			else if (positionSourceType == GameDefined)
				Boolean updateAtEachFrame;
		}
		else // from WolvenKit code
		{
			uint u1;
			uint u2;
		}
	}
	*/
	
	//Boolean overrideParentSettingsForGameDefinedAuxillarySends;
	Boolean overridePositioningSettings;
	
	//byte howToLimitSoundInstances;
	
	struct Positioning
	{
		enum <byte> SoundPositioningType
		{
			Three_Dimensional = 0,
			Two_Dimensional = 1
		} soundpositioningtype;
		
		// BIG NOTE: when you set Wwise to have an RTPC effect of 'Positioning
		// type' (aka when you want the sound to switch between 2D and 3D), then
		// the sound bank will always set the SoundPositioningType to 2D and this
		// boolean will be set to 1! but the important fact is: when this happens,
		// the structure will be in the 3D form, even though the SoundPositioningType
		// is set to 2D!
		Boolean uses_RTPC_if_2D <comment="This one ONLY matters if the sound positioning type is also 2D!">;
		//Boolean overrideParentSettingsForUserDefinedAuxillarySends;
		// this got swapped with isUserDefinedAuxillarySends
		
		if (soundpositioningtype == Two_Dimensional && !uses_RTPC_if_2D)
		{
			Boolean enable_panner;
		}
		else // 3D
		{
			// this is only true if we're using an RTPC that changes the positioning
			// type!
			if (uses_RTPC_if_2D && soundpositioningtype != Three_Dimensional)
			{
				Boolean enable_panner_when_set_to_2D;
			}
			
			enum <int> PositionSourceTypee
			{
				User_Defined = 0,
				Game_Defined = 1
			} positionsourcetype;
			uint attenuationObjectId;
			Boolean enableSpatialization;
			
			if (positionsourcetype == User_Defined)
			{
				PlayType playType;
				Boolean isLoop <comment="only when Play Type is Continuous, otherwise ignore value of this field -Xentax">;
				uint transitionTime <comment="only when Play Type is Continuous, otherwise ignore value of this field -Xentax">;
				Boolean followListenerOrientation;
				
				uint num_of_positions;
				local uint curNumOfPositions;
				for (curNumOfPositions = 0; curNumOfPositions < num_of_positions; curNumOfPositions++)
				{
					struct TwoDimensionalPoint
					{
						float X_coordinate;
						uint maybe_zero;
						float Y_coordinate;
						uint seperator;
					} twodimensionalpoint;
				}
				
				uint num_of_paths;
				uint who_knows[num_of_paths * 2];
				local uint curNumOfPaths;
				for (curNumOfPaths = 0; curNumOfPaths < num_of_paths; curNumOfPaths++)
				{
					struct Random_Range_Of_Path
					{
						float rr_horizontal;
						float rr_vertical;
                        local float rr_horizontal_real = rr_horizontal / 25.0;
                        local float rr_vertical_real = rr_vertical / 25.0;
					} random_range_of_path;
				}
			}
			else if (positionsourcetype == Game_Defined)
			{
				Boolean updateAtEachFrame;
			}
		}
		//FSkip(1); // appears to be always zero
		
	};
	if (overridePositioningSettings == is_true) 
		Positioning positioning;
	
	
	//Boolean overrideParentSettingsForPlaybackLimitSection;
	
	//Boolean unknownParameterForPlaybackLimitSection;
	
	/*
	if (unknownParameterForPlaybackLimitSection == is_true)
	{
		enum <byte> InstanceToDiscard
		{
			Oldest = 0,
			Newest = 1,
		} instance_to_discard;
		
		enum <byte> LimitReached
		{
			Kill_voice = 0,
			Use_virtual_voice_settings = 1,
		} when_limitreached;
		
		ushort limitSoundInstancesTo;
	}
	*/
	
	struct General_Settings
	{
		Boolean overrideGameDefinedAuxillarySends;
		
		Boolean useGameDefinedAuxillarySends;
		
		//byte virtualVoiceBehavior;
		Boolean overrideUserDefinedAuxillarySends;
		
		Boolean isUserDefinedAuxillarySends;
		
		if (isUserDefinedAuxillarySends == is_true)
		{
			uint auxillaryBus0Id;
			uint auxillaryBus1Id;
			uint auxillaryBus2Id;
			uint auxillaryBus3Id;
		}
	} general_settings;
	
	//Boolean overrideParentSettingsForVirtualVoiceSection;
	byte unknown;
	
	//ushort unknown2;
	struct Advanced_Settings
	{
		
		struct Playback_limit
		{
			enum <byte> InstanceToDiscard
			{
				Oldest = 0,
				Newest = 1,
			} instance_to_discard;
			
			enum <byte> LimitReached
			{
				Kill_voice = 0,
				Use_virtual_voice_settings = 1,
			} when_limitreached;
			
			//ushort stage_groups_count;
			ushort limitSoundInstancesTo <comment="If 0, then this setting is disabled.">;
			enum <ubyte> SoundInstanceType
			{
				Per_game_object = 0,
				Globally = 1
			} soundinstancetype;
		} playback_limit;
		
		struct Virtual_voice
		{
			enum <byte> Virtual_voice_behavior
			{
				Continue_to_play = 0,
				Killvoice = 1,
				Send_to_virtual_voice = 2
			} virtual_voice_behavior;
		} virtual_voice;
		
		Boolean overridePlaybackLimit;
		Boolean overrideVirtualVoice;
		
	} advanced_settings;

	// NOTE: there's always 10 empty bytes here, which i guess is for the states section
	// EDIT: even after implementing the states section, it looks like a 6-byte skip is
	// still needed. wtf WWise?!
	// EDIT as of v2.5, turns out you only need to skip 4 bytes. this is common behavior
	// with WWise it seems.
	
	FSkip(3);
	Boolean HDR_enable_envelope;
	
	struct States
	{
		uint state_groups_count;
		local uint curStateGroupsCount;
		
		// used later
		local ushort curNumOfStatesCustomSettings;
		
		for (curStateGroupsCount = 0; curStateGroupsCount < state_groups_count; curStateGroupsCount++)
		{
			struct State_Group
			{
				uint state_group_ID; Printf("HASH-stateGroup=%u\n",state_group_ID);
				enum <byte> Changes_Occur_At
				{
					Immediate = 0,
					Next_Grid = 1,
					Next_Bar = 2,
					Next_Beat = 3,
					Next_Cue = 4,
					Custom_Cue = 5,
					Entry_Cue = 6,
					Exit_Cue = 7,
				} changes_occur_at <comment="Only used for music. Otherwise, it's always Immediate.">;
			
				ushort num_of_states_with_custom_settings;
				
				for (curNumOfStatesCustomSettings = 0; curNumOfStatesCustomSettings < num_of_states_with_custom_settings; curNumOfStatesCustomSettings++)
				{
					struct State
					{
						uint state_object_ID; Printf("HASH-state=%u\n",state_object_ID);
						uint settings_object_ID;
					} state;
				}
			} state_group;
		}
	} states;
	
	
	RTPC rtpc;
	// NOTE: we're gonna have a problem here. apparently no read action's performed if CAkBankMgr::BankHasFeedback() returns false...
	uint bank_feedback_ID <comment="Unknown purpose, it's only used if CAkBankMgr::BankHasFeedback() returns true and this uint is != 0">;
};

#endif
