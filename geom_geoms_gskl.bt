LittleEndian();

#include "common/common.bt"
#include "common/geo_common.bt"

#define COLOR_HEADER 0xDFEFAA
#define COLOR_ENTRY 0x7DE39E
#define COLOR_ENTRYBVHSECTION 0x00AAFF
#define COLOR_CHUNK11 0xAED2E8
#define COLOR_ENTRYMATERIALSECTION 0xB9E8DD
#define COLOR_BOUNDINGBOXCHUNK 0xF7F205

typedef struct
{
	//local int64 SelfStartPos = FTell();

	GeoGeomHeader Header;

	switch (Header.Type)
	{
	case GEO_PRIM_TYPE_AABB:
		GeoPrimAabb Prim[Header.PrimCount] <optimize = true>;
		break;
	case GEO_PRIM_TYPE_POLY:
		GeoPrimPoly Prim[Header.PrimCount] <optimize = true>;
		break;
	default:
        Assert(false, "Unknown GEO_PRIM_TYPE type detected!");
	}

	// if ((Header.VertexBufferOffset) != 0)
	// 	{
	// 		FSeek(SelfStartPos + Header.VertexBufferOffset * 16);

	// 		struct GeoVertexHeader
	// 		{
	// 			uint VertexCount;
	// 			uint VerticesIndexOffset;

	// 			uint Unknown0Or1; Assert(Unknown0Or1 == 0 || Unknown0Or1 == 1);

	// 			uint OriginIndex;

	// 			int64 VertexDataOffset; // This gets patched at runtime to use a FMDL pointer.
				
	// 			uint FmdlVertexBufferOffset;

	// 			uint Padding0 <hidden = true>; Assert(Padding0 == 0);
	// 		} VertexHeader; // Name taken from PES RTTI

	// 		// mgsvtpp.exe!141bd7e9c
	// 		if ((Header.Flags & GEO_SHAPE_FLAGS_USE_FMDL_VERTEX_DATA) == 0)
	// 		{
	// 			Vector3W VertexData[VertexHeader.VertexCount] <optimize = true>;

	// 			// origin = VertexData[VertexHeader.OriginIndex]
	// 			// A: VertexData[VertexHeader.VerticesIndexOffset + IndexSet.Offset0] + origin
	// 			// B: VertexData[VertexHeader.VerticesIndexOffset + IndexSet.Offset1] + origin
	// 			// C: VertexData[VertexHeader.VerticesIndexOffset + IndexSet.Offset2] + origin
	// 			// D: VertexData[VertexHeader.VerticesIndexOffset + IndexSet.Offset3] + origin
	// 		}
	// 		else if (VertexHeader.VertexDataOffset == 0 && false /* FMDL vertex pointer is null*/)
	// 		{
	// 			// A: Vector3W(0, -10000, 0, 0)
	// 			// B: Vector3W(0, -10000, 1, 0)
	// 			// C: Vector3W(1, -10000, 1, 0)
	// 			// D: Vector3W(1, -10000, 0, 0)
	// 		}
	// 		else
	// 		{
	// 			// VertexData points to the VertexHeader.FmdlVertexBufferOffset-adjusted fmdl data.
	// 			// A: VertexData[IndexSet.Offset0]
	// 			// B: VertexData[IndexSet.Offset1]
	// 			// C: VertexData[IndexSet.Offset2]
	// 			// D: VertexData[IndexSet.Offset3]
	// 		}
	// 	}
} GeoShape <read=Str("%s, %s", EnumToString(this.Header.Type), ReadGEO_SHAPE_FLAGS(this.Header.Flags))>;

struct GeoBlock  // Name taken from PES RTTI
{
	byte IsFinalEntry;

	byte HeaderCount;
	ushort HeadersDataSize; // From first header to end of vertex buffer
	
	// Neither of these values are used and both can and will overflow if the file is big enough. My guess is they kept them for backwards compatibility so the create function still increments them, but it hits limits.
	ushort VertexBufferOffset_Unused; ushort Padding0 <hidden = true>; Assert(Padding0 == 0); // In cases where FMDL buffer is used, this value is just a sort of default; points to right after material buffer 
																							  // Hypothesis: the creator still dutifully calculates offsets that incorporate all the GeoBlocks and material buffer but usually the code is supposed to update it to the position after all the GeomHeaders but that's never called for groups that only use FMDL data
	ushort HeadersOffset_Unused; ushort Padding1 <hidden = true>; Assert(Padding1 == 0);
	
	uint VertexBufferOffset;
	uint HeadersOffset;

	uint NextSectionOffset;
	
	GEO_COL_A Tags;
	
	FSeek(startof(this) + HeadersOffset);

	// I'm going to have to stare at this for longer to understand what the heck is going on here.
	struct
	{
		local uint64 ptrs[6];
		ptrs[0] = startof(parentof(this)) + HeadersOffset;
		local uint j = 1;
		local uint j_minusOne;
		local int iteratorIndex = 0;
		local int iteratorIndex_minusOne;
		local uint64 ptr;

		do
		{
			ptr = ptrs[iteratorIndex];

			j_minusOne = j - 1;
			iteratorIndex_minusOne = iteratorIndex - 1;

			FSeek(ptr + 4);
			if (ReadUInt() != 0) // if (Shape.Header.NextHeaderOffset != 0)
			{
				ptrs[j - 1] = ptr + ReadUInt() * 16; // Shape.Header.NextHeaderOffset

				j_minusOne = j;
				iteratorIndex_minusOne = iteratorIndex;
			}
		
			j = j_minusOne;
			iteratorIndex = iteratorIndex_minusOne;
			FSeek(ptr);
			if ((ReadUInt() & 0x200) == 0) // if (Shape.Header.Info.Flags & GEO_SHAPE_FLAGS_NO_CHILD == 0)
			{
				GeoShape Shape;

				if (Shape.Header.ChildHeaderOffset != 0)
				{
					if (true)
					{
						j = j_minusOne + 1;
						iteratorIndex = iteratorIndex_minusOne + 1;
						ptrs[j_minusOne] = ptr + Shape.Header.ChildHeaderOffset * 16;
					}
				}
			}
		} while (j > 0);
	} Shapes;
	
	FSeek(startof(this) + VertexBufferOffset);

	GeoVertexHeader VertexHeader;
};

struct GeoMaterialHeader // Name taken from PES RTTI
{
	byte MaterialsOffsetInEntries; // Confirmed via PES
	byte MaterialsTotalSizeInEntries; // Presumptive; includes "null terminator entry"
	byte AuxMaterialsOffsetInEntries; // Confirmed via PES
	byte AuxMaterialsTotalSizeInEntries; // Presumptive; includes "null terminator entry"
};

struct GeoMaterial
{
	GeoNameHash Name;

	uint64 LikelyPtrPlaceholder; Assert(LikelyPtrPlaceholder == 0); // The PES .so has a concept of a MaterialDatabase. 
																	// The hash likely gets resolved at runtime into a permanent pointer to the material and stored here
};

typedef struct
{
	GeoNameHash NameHash <hidden = true>;

	uint NameStringLength <hidden = true>;

	char Name[NameStringLength];
} GeoBone <read = (this.Name)>;

struct GeoBoundingVolume
{
	Vector3 BoundingBoxCorner; // Mysterious. mgsvtpp.exe!141b95c89

	ushort GridTotalDataSize;
	ushort BlockCount;

	Vector3 BoundingBoxExtents;

	uint NextSectionOffset;

	Vector3 CellSize;
	
	uint CellCountX;
	uint CellCountY;
	uint CellCountZ;
	
	GEO_COL_A Tags;
	
	struct
	{
		short NodeOffsets[CellCountX * CellCountY * CellCountZ] <hidden = true>;

		local uint i;
		local uint j;
		for (i = 0; i < CellCountX * CellCountY * CellCountZ; i++)
		{
			if (NodeOffsets[i] != -1)
			{
				FSeek(startof(parentof(this)) + NodeOffsets[i]);

				struct
				{
					ushort BlockCount <hidden = true>;
					for (j = 0; j < BlockCount; j++)
						ushort BlockIndex;
				} Cell;
			}
			else
			{
				struct
				{
				} Cell;
			}
		}
	} Cells;
};

// mgsvtpp.exe!14cd19a40 - what does address point to, again? It sorta got orphaned.

typedef struct
{
	struct 
	{
		local int64 BlocksStartPos = FTell();

		while(!ReadUByte())
		{
			BlocksStartPos = FTell();

			GeoBlock Block;

			FSeek(BlocksStartPos + 32);
		};

		// Skip last "dummy" data chunk definition
		FSkip(32);
	} Blocks <bgcolor = COLOR_CHUNK11>;

	struct
	{
		GeoMaterialHeader Header; 

		local int64 MaterialsStartPos = FTell();

		FSeek(MaterialsStartPos + Header.MaterialsOffsetInEntries * 12 /*sizeof(GeoMaterial)*/);
		
		while (ReadUInt() != 0)
		{
			GeoMaterial Material;
		}

		FSkip(12 /*sizeof(GeoMaterial)*/);

		FSeek(MaterialsStartPos + Header.AuxMaterialsOffsetInEntries * 12 /*sizeof(GeoMaterial)*/);
		
		while (ReadUInt() != 0)
		{
			GeoMaterial Material;
		}

		FSkip(12 /*sizeof(GeoMaterial)*/);

		FAlign(16);
	} Materials <bgcolor = COLOR_ENTRYMATERIALSECTION>;
} GeoGroup; // The PES .so deals with a GeoGroup structure that has a grid and owns a list of GeoBlocks, but the layout is sort of different. It seems like it's a sort of proto-BVH section 

typedef struct
{
	switch(parentof(this).Flags)
	{
	case 0x10:
		break;
	case 0x40:
		break;
	case 0xB:
		if (parentof(this).DataOffset != 0)
		{
			GeoBone Bone;

			FAlign(16);
		}
		break;
	case 0x0:
		if (parentof(this).DataOffset != 0)
		{
			GeoBoundingVolume BoundingVolume <bgcolor = COLOR_ENTRYBVHSECTION>;

			FAlign(16);
		}

		GeoGroup Group;
		break;
	case 0x6:
		GeoGroup Group;
		break;
	}
} GeoPayload;

#define FOX_DATA_HASH_TYPE GeoNameHash
#define FOX_DATA_PAYLOAD GeoPayload

#include "common/FoxData_common.bt"

FoxDataHeader Header; // mgsvtpp.exe!141bef7b2

FSeek(Header.NodesOffset);

FoxDataNodes Nodes;