LittleEndian();

#include "common/common.bt"

#define COLOR_HEADER 0xBED655
#define COLOR_MANIFEST 0xD9FCAC

#define COLOR_NAVWORLD 0x4F54F0
#define COLOR_NAVWORLD_SS1 0x5F63F1
#define COLOR_NAVWORLD_SS2 0x6F73F2
#define COLOR_NAVWORLD_SS3 0x7F82F4
#define COLOR_NAVWORLD_SS4 0x8F92F5
#define COLOR_NAVWORLD_SS5 0x9FA1F6
#define COLOR_NAVWORLD_SS6 0xAFB1F8

#define COLOR_NAVMESHCHUNK 0xEBC05B
#define COLOR_NAVMESHCHUNK_SS1 0xECC569
#define COLOR_NAVMESHCHUNK_SS2 0xEECB78
#define COLOR_NAVMESHCHUNK_SS3 0xF0D187

#define COLOR_SEGMENTCHUNK 0xB844B7
#define COLOR_SEGMENTCHUNK_SS1 0xC979A3
#define COLOR_SEGMENTCHUNK_SS2 0xE3B9AD

#define COLOR_SEGMENTGRAPH 0x3DC59B
#define COLOR_SEGMENTGRAPH_SS1 0x4ECAA4
#define COLOR_SEGMENTGRAPH_SS2 0x60CFAD
#define COLOR_SEGMENTGRAPH_SS3 0x71D4B6

#define COLOR_SECTION2 0x6083FF

#define COLOR_SEARCHSPACE 0x894E00
#define COLOR_SEARCHSPACE_BUCKETDESC 0xB58536
#define COLOR_SEARCHSPACE_BUCKET 0xE6AA89

typedef ubyte TWENTYFOURBITUINT[3] <read=TWENTYFOURBITUINTRead>;

string TWENTYFOURBITUINTRead( TWENTYFOURBITUINT n )
{
	string s;
	uint val = (uint)(n[0]) + (((uint)n[1]) << 8) + (((uint)n[2]) << 16);
	SPrintf( s, "%u", val);
	return s;
}

typedef struct {
	ushort x;
	ushort y;
	ushort z;
} Vertex <read = Str("%f, %f, %f", (float)x / header.XDivisor, (float)y / header.YDivisor, (float)z / header.ZDivisor)>;

struct IndexPair8
{
	ubyte from;
	ubyte to;
};

enum <byte> NAV2_FEATURE_FLAGS
{
	A = 1 << 0,
	B = 1 << 1,
	C = 1 << 2,
};

enum <uint> ENTRY_TYPE
{
	NAVWORLD = 0,
	NAVMESH_CHUNK = 1,
	NAVWORLD_SEGMENT_GRAPH = 3,
	SEGMENT_CHUNK = 4
};

enum <ubyte> ENTRY_TYPE_UINT8
{
	TYPE_NAVWORLD = 0,
	TYPE_NAVMESH_CHUNK = 1,
	TYPE_NAVWORLD_SEGMENT_GRAPH = 3,
	TYPE_SEGMENT_CHUNK = 4
};

// FileIndex: 0 for .nav2, 1 for .1.nav2, etc
// BlockID: For 64x64 map, block coordinate is (101 + BlockID % 64, 101 + BlockID / 64). Same as OBR(B), etc.
typedef struct
{
    uint FileIndex : 15;
    uint BlockID : 16;
    uint Padding : 1 <hidden = true>; Assert(Padding == 0);
} FileUid <optimize = false, read = Str("FileIndex: %u, BlockID: %u", FileIndex, BlockID)>;

struct Header
{
	uint Signature;
	uint FileSize;
	uint FirstSectionOffset;
	uint entryCount;
	
	uint SearchSpaceOffset;
	FileUid Coordinate;
	uint section2Offset;
	uint Padding0; Assert(Padding0 == 0); // Unknown, often 0

	Vector3 Origin;

	uint ConnectTileInfosOffset;
	uint u1b; // Haven't seen this used, but possibly an offset too
	uint manifestOffset;
	uint manifestSize;
	
	uint u1c; Assert(u1c == 0); // Unknown, often 0
	uint u1d; Assert(u1d == 0); // Unknown, often 0

	ushort XDivisor;
	ushort YDivisor;
	ushort ZDivisor;

	ushort u1h; // Unknown, often 127 (possibly a divisor for Vector4 values?)

	NAV2_FEATURE_FLAGS FeatureFlags;
	ubyte section2EntryCount;
	ushort n8; // Can be 0xFF - 141af52cc

	// hfloat vals[8]; // Unconvinced these are hfloats, but can't figure out what this is
} header <bgcolor = COLOR_HEADER>;

FSeek(header.manifestOffset);

struct Manifest
{
	uint manifestEntryCount;

	struct ManifestEntry {

		struct ManifestSubEntry
		{
			FileUid Coordinate;

			uint payloadOffset;
			ENTRY_TYPE_UINT8 entryType;
			ushort entrySize;
			ubyte n4;
		} subentries[manifestEntryCount] <optimize = false>;
	} manifest[3] <optimize = true>;
}manifest<bgcolor = COLOR_MANIFEST>;

FSeek(header.FirstSectionOffset);

struct NavWorld
{
	local long startPosition = FTell();

	// The subsection offsets are relative to the start of the NavWorld struct.
	uint VertexBufferOffset;
	Assert(VertexBufferOffset == 48);

	uint Subsection2Offset;
	uint EdgesOffset;

	// These two are seemingly not read by the exe.
	uint Subsection3Offset;
	uint Unknown_u1; Assert(Unknown_u1 == 0);

	uint Unknown_u2; Assert(Unknown_u2 == 0);

	// These two are seemingly not read by the exe.
	uint Subsection5Offset;

	uint Unknown_u3; Assert(Unknown_u3 == 0);

	uint Subsection6Offset;

	ushort VertexCount;
	ushort EdgeCount;

	ushort Padding0;
	ushort Padding1;
	ushort Padding2;
	Assert(Padding0 == 0 && Padding1 == 0 && Padding2 == 0 );

	ushort Subsection5Count;

	FSeek(startPosition + VertexBufferOffset);
	Vertex Vertices [VertexCount] <bgcolor = COLOR_NAVWORLD_SS1>;
	
	FSeek(startPosition + Subsection2Offset);
	struct NavWorldSubsection2Entry
	{
		ushort Subsection3Offset;
		ushort Subsection5Index;
		byte CountA;
		byte CountB;
	} Subsection2Entries [VertexCount] <bgcolor = COLOR_NAVWORLD_SS2>;

	// Not dependent on VertexCount != 0
	FSeek(startPosition + Subsection3Offset);
	struct
	{
		{
			local int i;
			local int j;
			for (i = 0; i < VertexCount; i++) 
			{
				FSeek (startPosition + Subsection3Offset + (Subsection2Entries[i].Subsection3Offset * 2));

				struct NavWorldSubsection3Entry
				{
					for (j = 0; j < Subsection2Entries[i].CountA; j++) 
					{
						ushort AdjacentNode;
						ushort EdgeIndex;
					}

					for (j = 0; j < Subsection2Entries[i].CountB; j++) 
					{
						short Unknown;
					}
				} Subsection3Entries <bgcolor = COLOR_NAVWORLD_SS3>;
			}
		}
	} Subsection3Entries;

	FSeek(startPosition + EdgesOffset);
	struct NavWorldEdge
	{
		ushort Weight;
		ushort Subsection5Index;

		IndexPair8 EdgeIndices; // These are indicies into the points array but need to add the number of vertexes in previous "chunks"
	} Edges[EdgeCount] <bgcolor = COLOR_NAVWORLD_SS4>;

	FSeek(startPosition + Subsection5Offset);
	struct NavWorldSubsection5Entry
	{
		ushort Flags; // probably?
	} Subsection5Entries[Subsection5Count] <bgcolor = COLOR_NAVWORLD_SS5>; // This is the same as the number of "chunks" in the file

	FSeek(startPosition + Subsection6Offset);
	struct NavWorldSubsection6Entry
	{
		// Index into NavmeshChunk subsection 2.
		ushort NavmeshChunkSubsection2Index;
	} Subsection6Entries[VertexCount] <bgcolor = COLOR_NAVWORLD_SS6>;
};

struct NavmeshChunk
{
	local uint startPosition = FTell();

	uint subsection1Offset;
	Assert(subsection1Offset == 32);

	uint subsection2Offset;
	uint subsection3Offset;
	
	ushort uu1;
	ushort uu2;
	ushort uu3;
	ushort uu4;
	ushort uu5;
	ushort uu6;

	ushort numFaces;
	ushort numVertices;

	ushort u4;
	ushort u5;

	FSeek(startPosition + subsection1Offset);

	Vertex vertices[numVertices]<bgcolor = COLOR_NAVMESHCHUNK_SS1>;

	FSeek(startPosition + subsection2Offset);

	uint faceOffsets[numFaces]<bgcolor = COLOR_NAVMESHCHUNK_SS2>;

	FSeek(startPosition + subsection3Offset);

	struct NavmeshChunkFaces
	{
		local uint i = 0;
		for (i = 0; i < numFaces; i++) {
			FSeek(startPosition + subsection3Offset + (faceOffsets[i] & 0x3ffff) * 2);
			struct NavmeshChunkSubsection3Entry {
				if (faceOffsets[i] >> 0x12 & 1 > 0) {
					short adjacentFaces[4];
				} else {
					short adjacentFaces[3];
				}

				byte v1;
				byte v2;
				byte v3;
				if (faceOffsets[i] >> 0x12 & 1 > 0) {
					byte v4;
				}

				if (faceOffsets[i] >> 0x12 & 1 > 0) {
					byte edgeIndices[4];
				} else {
					byte edgeIndices[3];
				}
			} entries;
		}
	} faces<bgcolor = COLOR_NAVMESHCHUNK_SS3>;
};

struct SegmentChunk
{
	local uint startPosition = FTell();

	uint subsection1Offset;
	Assert(subsection1Offset == 16);

	uint subsection2Offset;

	uint totalSize;
	uint entryCount;

	struct SegmentChunkSubsection1
	{
		struct SegmentChunkSubsection1Entry
		{
			Vertex a;
			Vertex b;
		} entries[entryCount];
	} subsection1<bgcolor = COLOR_SEGMENTCHUNK_SS1>;

	FSeek(startPosition + subsection2Offset);
	struct SegmentChunkSubsection2
	{
		struct SegmentChunkSubsection2Entry
		{
			short vertexIndexOffset;
			short navmeshChunkSubsection2EntryIndex;
			short u3;
			short u4;
			byte verts;
			byte faces;
			byte u7; // faces * 3 ?
			byte edges;
		} entries[entryCount];
	} subsection1<bgcolor = COLOR_SEGMENTCHUNK_SS2>;
};

struct NavWorldSegmentGraph
{
	local uint startPosition = FTell();

	uint subsection1Offset;
	Assert(subsection1Offset == 32);

	uint subsection2Offset;
	uint subsection3Offset;

	uint uu1;
	uint totalSize;     // Total size of the entry in bytes
	uint subsection1EntryCount;
	ushort uu3;
	uint totalEdges; // Probably?
	ushort padding;

	FSeek(startPosition + subsection1Offset);
	struct NavWorldSegmentGraphSubsection1
	{
		struct NavWorldSegmentGraphSubsection1Entry
		{
			Vertex position;
		} entries[subsection1EntryCount];
	} subsection1<bgcolor = COLOR_SEGMENTGRAPH_SS1>;

	FSeek(startPosition + subsection2Offset);
	struct NavWorldSegmentGraphSubsection2
	{
		struct NavWorldSegmentGraphSubsection2Entry
		{
			TWENTYFOURBITUINT subsection3Index;
			ubyte nEdges;
			short u3;
			ushort u4;
			byte u5;
			byte u6;
			byte offGroupEdges;
			byte offMeshEdges;
		} entries[subsection1EntryCount];
	} subsection2<bgcolor = COLOR_SEGMENTGRAPH_SS2>;

	if (subsection3Offset != totalSize)
	{
		FSeek(startPosition + subsection3Offset);

		struct NavWorldSegmentGraphSubsection3 {

			local int i = 0;
			local int j = 0;
			local int offset = 0;
			local TWENTYFOURBITUINT n;
			for (i = 0; i < subsection1EntryCount; i++) {
				n = subsection2.entries[i].subsection3Index;
				offset = (uint)(n[0]) + (((uint)n[1]) << 8) + (((uint)n[2]) << 16);
				FSeek (startPosition + subsection3Offset + offset*2);
				struct NavWorldSegmentGraphSubsection3Entry {
					if (subsection2.entries[i].nEdges > 0) {
						struct NavWorldSegmentType1Edges {
							ushort weight;
							ushort adjacentNode;
							ubyte adjacentEdgeCount;
							ubyte u1;
						}type1Edges[subsection2.entries[i].nEdges];
					}

					if (subsection2.entries[i].offGroupEdges > 0) {
						struct NavWorldSegmentType2Edges {
							ushort groupId;
							ushort weight;
							ushort adjacentNode;
							ubyte adjacentEdgeCount;
							ubyte u5;
						}type2Edges[subsection2.entries[i].offGroupEdges];
					}

					if (subsection2.entries[i].offMeshEdges > 0) {
						struct NavWorldSegmentType3Edges {
							ushort u1;
							ushort groupId;
							ushort adjacentNode;
							ushort u4;
							ubyte adjacentEdgeCount;
							ubyte u6;
						}type3Edges[subsection2.entries[i].offMeshEdges];
					}

					if (subsection2.entries[i].nEdges > 0) {
						for (j = 0; j < subsection2.entries[i].nEdges; j++) {
							struct NavWorldSegmentType1EdgeAdjacentEdges {
								ubyte adjacentEdges[type1Edges[j].adjacentEdgeCount];
							}type1AdjacentEdges;
						}
					}

					if (subsection2.entries[i].offGroupEdges > 0) {
						for (j = 0; j < subsection2.entries[i].offGroupEdges; j++) {
							struct NavWorldSegmentType2EdgeAdjacentEdges {
								ubyte adjacentEdges[type2Edges[j].adjacentEdgeCount];
							}type2AdjacentEdges;
						}
					}

					if (subsection2.entries[i].offMeshEdges > 0) {
						for (j = 0; j < subsection2.entries[i].offMeshEdges; j++) {
							struct NavWorldSegmentType3EdgeAdjacentEdges {
								ubyte adjacentEdges[type3Edges[j].adjacentEdgeCount];
							}type3AdjacentEdges;
						}
					}
				} entries;
			}
		}subsection3<bgcolor = COLOR_SEGMENTGRAPH_SS3>;
	}
};

struct Entry
{
	local long startOffset = FTell();

	ENTRY_TYPE entryType; Assert(entryType < 5); 

	uint nextEntryRelativeOffset;
	uint payloadRelativeOffset;
	
	FileUid Coordinate;
	 
	switch(entryType)
	{
		case NAVWORLD:
			FSeek(startOffset + payloadRelativeOffset);
			NavWorld world <bgcolor = COLOR_NAVWORLD>;
			break;
		case NAVMESH_CHUNK:
			FSeek(startOffset + payloadRelativeOffset);
			NavmeshChunk chunk <bgcolor = COLOR_NAVMESHCHUNK>;
			break;
		case NAVWORLD_SEGMENT_GRAPH:
			FSeek(startOffset + payloadRelativeOffset);
			NavWorldSegmentGraph navWorldSegmentGraph <bgcolor = COLOR_SEGMENTGRAPH>;
			break;
		case SEGMENT_CHUNK:
			FSeek(startOffset + payloadRelativeOffset);
			SegmentChunk segmentChunk <bgcolor = COLOR_SEGMENTCHUNK>;
			break;
	};

	FSeek(startOffset + nextEntryRelativeOffset);
} entry[header.entryCount] <read = Str("%s, id: %u", EnumToString(entryType), Coordinate.FileIndex), optimize = false, bgcolor = 0x5B1ED8>;

if (header.section2Offset)
{
	FSeek(header.section2Offset);

	local long startOffset = 0;
	local int remainingEntries = header.section2EntryCount;
	do
	{
		startOffset = FTell();
		struct Section2Entry
		{
			ushort nextEntryRelativeOffset;
			ushort subsection1RelativeOffset;
			ushort subEntryCount;
			ushort subsection2RelativeOffset;
			ushort subsection3RelativeOffset;
			ushort subsection4RelativeOffset;
			ushort subsection5RelativeOffset;
			ushort subsection6RelativeOffset;

			FSeek(startOffset + subsection1RelativeOffset);
			struct Section2Subsection1
			{
				Vertex position;
				ushort flags; // Maybe? Seems to match NavWorld flags
				ushort subsection2Offset;
				ushort countB;
				ushort countA;
			} subsection1Entries[subEntryCount];

			FSeek(startOffset + subsection2RelativeOffset);

			local int i = 0;
			local int shorts;
			local int ints;
			struct Section2Subsection2 {
				for (i = 0; i < subEntryCount; i++) {
					struct Section2Subsection2Entry {
						if (subsection1Entries[i].countA > 0) {
							struct AEntries {
								ushort weight; // Possibly ?
								ushort adjacentNodeIndex;
							} aEntries[subsection1Entries[i].countA];
						}

						if (subsection1Entries[i].countB > 0) {
							struct BEntries {
								ushort u3;
							} bEntries[subsection1Entries[i].countB];
						}
					} entries;
				}
			} subsection2Entries;

			FSeek(startOffset + subsection3RelativeOffset);
			struct Section2Subsection3
			{
				uint u1;
				ushort u5;
				ushort u7;
			} subsection3Entries[subEntryCount];

			FSeek(startOffset + subsection4RelativeOffset);
			struct Section2Subsection4
			{
				// Some kind of count or index. Not unique values.
				ushort n1;
			} subsection4Entries[subEntryCount];

			Assert (subsection6RelativeOffset - subsection5RelativeOffset == 24);

			struct Section2Subsection5
			{
				ubyte u1[24];
			} subsection5Entries;

			// TODO: Subsection 6?
		} section2Entry <bgcolor = COLOR_SECTION2>;

		FSeek(startOffset + section2Entry.nextEntryRelativeOffset);
		remainingEntries--;
	} while(remainingEntries != 0);
}

if (header.SearchSpaceOffset != 0)
{
	FSeek(header.SearchSpaceOffset);
	struct SearchSpace
	{
		local long selfOffset = startof(this);

		Vector3 Position; 
		ushort RangeY;
		ushort Padding0 <hidden = true>; Assert(Padding0 == 0); // Assumed to be padding

		uint BlockCountX;
		uint BlockCountY;
		uint BlockCountZ;
		uint BlockSizeXZ;

		uint BlockSizeY;
		uint BucketDescsOffset; Assert(BucketDescsOffset == 48);

		uint BucketEntriesOffset;
		uint NextSectionOffset;

		FSeek(selfOffset + BucketDescsOffset);
		struct SearchBucketDesc
		{
			uint StartOffset;
			ushort Count;
			ubyte u2_MinY; // fox::nav::SearchSpace::GetBucketActualRangeY
			ubyte u3_MaxY; // ""
		} BucketDescs[BlockCountX * BlockCountY * BlockCountZ] < bgcolor = COLOR_SEARCHSPACE_BUCKETDESC>;

		Assert(FTell() == selfOffset + BucketEntriesOffset);

		struct {
			local int i;
			local int j;
			for (i = 0; i < BlockCountX * BlockCountY * BlockCountZ; i++) {
				FSeek(startof(BucketDescs[i]) + BucketDescs[i].StartOffset);

				for (j = 0; j < BucketDescs[i].Count; j++) {
					struct SearchBucketEntry
					{
						FileUid Uid; // Is this a full Uid?
						uint IndexCount;
						ushort Indices[IndexCount]; // SegmentChunks apparently
					} BucketEntry;
				}
			}
		} BucketEntries <bgcolor = COLOR_SEARCHSPACE_BUCKET>;

        FAlign(16);
		Assert(FTell() == selfOffset + NextSectionOffset);

	} _SearchSpace <bgcolor = COLOR_SEARCHSPACE>;
}

if (header.ConnectTileInfosOffset != 0)
{
	FSeek(header.ConnectTileInfosOffset);

	// See fox::nav::service::WorldService::ResolveConnectTileInfosWithName
	struct ConnectTileInfosHeader
	{
		local long selfOffset = startof(this);
		
		ushort GroupsOffset_Indices;
		ushort InfosOffset_Indices;
		ushort NodesOffset_Indices;
		ushort GroupCount;

		struct ConnectTileInfoNodeDesc
		{
			ushort A;
			ushort B;
		};

		struct ConnectTileInfoDesc
		{
			ushort DataChunkIndex;
			ushort Count : 5 <hidden = true>;
			ushort StartOffset_Indices : 11 <hidden = true>;

			FSeek(selfOffset + (2 * NodesOffset_Indices) + (4 * StartOffset_Indices)); // 4 == sizeof(this)
			for (k = 0; k < Count; k++)
			{
				ConnectTileInfoNodeDesc Node;
			}
		};

		struct ConnectTileInfoGroupDesc
		{
			StrCode32 Name;
			ushort Count : 5 <hidden = true>;
			ushort StartOffset_Indices : 11 <hidden = true>;

			FSeek(selfOffset + (2 * InfosOffset_Indices) + (4 * StartOffset_Indices)); // 4 == sizeof(this)
			for (j = 0; j < Count; j++)
			{
				ConnectTileInfoDesc Info;
			}
		};

		FSeek(selfOffset + 2 * GroupsOffset_Indices);
		struct
		{
			local int i;
			local int j;
			local int k;
			for (i = 0; i < GroupCount; i++)
			{
				ConnectTileInfoGroupDesc Group;
			}
		} Groups;
	} _ConnectTileInfosContainer;
}