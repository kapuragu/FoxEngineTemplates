#ifndef COMMON_BT
#define COMMON_BT

typedef struct
{
	ushort value <hidden = true>;
} half <read = ReadHalf>;
string ReadHalf(half& value)
{
	local uint tempA = (uint)value.value << 0x10;
	local uint tempB = 0;
	if ((tempA & 0x7fffffff) == 0)
		tempB = 0;
	else
		tempB = tempA & 0xb8000000 | 0x38000000;

	tempA = ((tempA & 0x7fffffff) >> 3) + tempB;

	local ubyte out[4];
	ConvertDataToBytes(tempA, out);

	float result = ConvertBytesToFloat(out);

	return Str("%f", result);
}

typedef struct
{
	uint hash<format=hex>;
} StrCode32 <read=(hash)>;

typedef struct
{
	uint64 hash<format=hex>;
} StrCode <read=(hash)>;

typedef struct
{
	uint64 hash<format=hex>;
} PathCode64 <read=(hash)>;

typedef struct
{
	float x;
	float y;
} Vector2 <read = Str("(%g, %g)", x, y)>;

typedef struct
{
	float x;
	float y;
	uint64 Padding <hidden = true>;
} Vector2W <read = Str("(%g, %g)", x, y)>;

typedef struct
{
	half x;
	half y;
} VectorH2 <read = Str("(%s, %s)", ReadHalf(x), ReadHalf(y))>;

typedef struct
{
	float x;
	float y;
	float z;
} Vector3 <read = Str("(%g, %g, %g)", x, y, z)>;

typedef struct
{
	float x;
	float y;
	float z;
	uint Padding <hidden = true>;
} Vector3W <read = Str("(%g, %g, %g)", x, y, z)>;

typedef struct
{
	float x;
	float y;
	float z;
	short x_offset;
	short z_offset;
} WideVector3 <read = Str("(%g, %g, %g, %d, %d)", x, y, z, x_offset, z_offset)>;

typedef struct
{
	half x;
	half y;
	half z;
} VectorH3 <read = Str("(%s, %s, %s)", ReadHalf(x), ReadHalf(y), ReadHalf(z))>;

typedef struct
{
	float x;
	float y;
	float z;
	float w;
} Vector4 <read = Str("(%g, %g, %g, %g)", x, y, z, w)>;

typedef struct
{
	half x;
	half y;
	half z;
	half w;
} VectorH4 <read = Str("(%s, %s, %s, %s)", ReadHalf(x), ReadHalf(y), ReadHalf(z), ReadHalf(w))>;

typedef struct
{
	ubyte x <read = ((float)this / 0xFF)>;
	ubyte y <read = ((float)this / 0xFF)>;
	ubyte z <read = ((float)this / 0xFF)>;
	ubyte w <read = ((float)this / 0xFF)>;
} VectorB4 <read = Str("(%g, %g, %g, %g)", (float)x / 0xFF, (float)y / 0xFF, (float)z / 0xFF, (float)w / 0xFF)>;

typedef struct
{
	float x;
	float y;
	float z;
	float w;
} Quaternion <read = Str("(%g, %g, %g, %g)", x, y, z, w)>;

typedef struct
{
	half x;
	half y;
	half z;
	half w;
} QuaternionH <read = Str("(%s, %s, %s, %s)", ReadHalf(x), ReadHalf(y), ReadHalf(z), ReadHalf(w))>;

typedef struct
{
	float x0;
	float y0;
	float z0;
	float w0;

	float x1;
	float y1;
	float z1;
	float w1;

	float x2;
	float y2;
	float z2;
	float w2;

	float x3;
	float y3;
	float z3;
	float w3;
} Matrix4;

typedef struct
{
	Vector4 Min;
	Vector4 Max;
} BoundingBox;

typedef struct
{
	Vector3 scale;
	Quaternion rotation_quat;
	Vector3 translation;
} Transform;

typedef struct
{
	byte Data[16];
} MD5;

void FAlign(int alignment)
{
	local int64 alignmentRequired = FTell() % alignment;
	if (alignmentRequired > 0)
		FSeek(FTell() + alignment - alignmentRequired);
}

#endif