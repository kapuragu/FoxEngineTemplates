// VFXLB - Video Effects Locator Binary File
// Template by RLC, based on documentation by Morbidslinky - inspired by other FOX templates by the researchers of Modders' Heaven!
// https://metalgearmodding.fandom.com/wiki/VFXLB

// BigEndian();

// Regardless of endianness
BitfieldRightToLeft();

#define COLOR_MS_BLU 0xFBB700
#define COLOR_MS_RED 0x3F00D0
#define COLOR_MS_BLK 0x000007
#define COLOR_MS_ONG 0x00B7FB

#include "common/common.bt"

string ResolveHashFunc(StrCode32& hash)
{
	switch (hash.hash)
	{
    //propertyName
	case 3623321169: return "setupType";
	case 1232604508: return "updateType";
	case 323058276: return "enableWeatherControl";
	case 1944870491: return "sunny";
	case 404938703: return "cloudy";
	case 2870733460: return "rainy";
	case 3049692060: return "sandstorm";
	case 3493002759: return "foggy";
	case 1116760736: return "sunnyDelayTime";
	case 2273136830: return "cloudyDelayTime";
	case 1027940819: return "rainyThreshold";
	case 3219757566: return "rainyDelayTime";
	case 3874602120: return "sandstormThreshold";
	case 3110818177: return "sandstormDelayTime";
	case 243931463: return "foggyThreshold";
	case 1310568117: return "foggyDelayTime";
	case 2776657607: return "enableTimeZone";
	case 1447609528: return "onTimeHour";
	case 136132538: return "onTimeMinute";
	case 1651073893: return "offTimeHour";
	case 905616978: return "offTimeMinute";
	case 2631961385: return "enableSendWeatherFadeValue";
	case 1455572283: return "sendWeatherFadeValueName";
	case 790129130: return "enableAroundCamera";
	case 322058693: return "aroundCameraEffectiveLength";
	case 1064339835: return "aroundCameraInverse";
	case 1290022858: return "effectiveLength";
	case 2159627008: return "generationType";
	case 1283436193: return "enableAreaQuadCulling";
	case 3320933874: return "areaRadiusSize";
	case 3545218756: return "areaLevelThreshold";
	case 3862311135: return "vfxInstanceName";
	case 804179602: return "enableImmediateUpdate";
    //String value
	case 4250587280: return "SEND_CHILD_MATRIX";
	case 2304335147: return "TPP_WEATHER_CONTROL";
	case 191059317: return "Color";
	case 2639047403: return "AROUND_CAMERA";
	case 3473199461: return "GENERATION_8";
    case 473978412: return "GENERATION_7";
	default: return Str("%u",hash.hash);
	}
}

enum <uint> FX_LOCATOR_HEADER_FLAGS
{
	FX_LOCATOR_HEADER_FLAGS_BLOCK_MEMORY_ALLOCATION		= 0x1, //blockMemoryAllocation
	FX_LOCATOR_HEADER_FLAGS_804179602  = 0x2,
	FX_LOCATOR_HEADER_FLAGS_USER_RANDOM_SEED     = 0x4, //enableUserRandomSeed userRandomSeed s10010_s03_FxLocators.vfxlb
	FX_LOCATOR_HEADER_FLAGS_SHAPE_KEEP      = 0x8, //shapeKeep

	FX_LOCATOR_HEADER_FLAGS_INSTANCE_NAME   = 0x10, //effectInstanceName
	FX_LOCATOR_HEADER_FLAGS_VARIATION_NAME  = 0x20, //variationName
	FX_LOCATOR_HEADER_FLAGS_PARAMETERS      = 0x40, //dynamicProperties
	FX_LOCATOR_HEADER_FLAGS_CHILDREN        = 0x80,

	FX_LOCATOR_HEADER_FLAGS_WORLD_TRANSFORM_NO_SCALE            = 0x100,
	FX_LOCATOR_HEADER_FLAGS_WORLD_TRANSFORM_NO_ROT              = 0x200,
	FX_LOCATOR_HEADER_FLAGS_USE_LOCAL_TRANSFORM          = 0x400,
	FX_LOCATOR_HEADER_FLAGS_LOCAL_TRANSFORM_NO_SCALE = 0x800,
	FX_LOCATOR_HEADER_FLAGS_LOCAL_TRANSFORM_NO_ROT   = 0x1000, //twice in s10130_area02_FxLocators.vfxlb on locator, many times in mafr_flowStation_FxLocators.vfxlb, in locators

	FX_LOCATOR_HEADER_FLAGS_ENABLE  = 0x2000,
};

enum <uint> FxLocatorParamType
{
	FX_LOCATOR_PARAM_TYPE_BOOL = 0,
	FX_LOCATOR_PARAM_TYPE_FLOAT = 1,
	FX_LOCATOR_PARAM_TYPE_BYTE = 3,
	FX_LOCATOR_PARAM_TYPE_INT = 4,
	FX_LOCATOR_PARAM_TYPE_UINT = 5,
	FX_LOCATOR_PARAM_TYPE_STRING = 6,
};

typedef struct 
{
	PathCode64 VfxFile <fgcolor = 0x000007>;

	FX_LOCATOR_HEADER_FLAGS Flags; Assert(Flags < 0x10000);

	uint Padding <hidden=true>; Assert(Padding == 0);
	
	if (!(Flags & FX_LOCATOR_HEADER_FLAGS_WORLD_TRANSFORM_NO_SCALE))
		Vector3 WorldScale;
	if (!(Flags & FX_LOCATOR_HEADER_FLAGS_WORLD_TRANSFORM_NO_ROT))
		Quaternion WorldRotation;
	Vector3 WorldTranslation;

	if (Flags & FX_LOCATOR_HEADER_FLAGS_USE_LOCAL_TRANSFORM)
	{
		if (!(Flags & FX_LOCATOR_HEADER_FLAGS_LOCAL_TRANSFORM_NO_SCALE))
			Vector3 LocalScale;
		if (!(Flags & FX_LOCATOR_HEADER_FLAGS_LOCAL_TRANSFORM_NO_ROT))
			Quaternion LocalRotation;
		Vector3 LocalTranslation;
	}
	
	if (Flags & FX_LOCATOR_HEADER_FLAGS_INSTANCE_NAME)
    {
		StrCode32 effectInstanceName; // StrCode32 hash of TppDataUtility handle
    }

	if (Flags & FX_LOCATOR_HEADER_FLAGS_VARIATION_NAME)
	{
		StrCode32 variationName;
	}

	if (Flags & FX_LOCATOR_HEADER_FLAGS_CHILDREN)
	{
		ushort ChildCount <hidden=true>;
		ushort ChildLocatorIndex[ChildCount];
	}

	if (Flags & FX_LOCATOR_HEADER_FLAGS_PARAMETERS)
	{
		uint dynamicPropertyCount <hidden = true>;

		// Notable ones: 804179602, 3612282275, or 1594808049
		StrCode32 dynamicPropertyName[dynamicPropertyCount] <read=ResolveHashFunc(this)>;
		
		struct FxVfxInstanceParameterDesc
		{
			uint BitIndex : 5;
			uint Padding : 3 <hidden = true>; Assert(Padding == 0);

			FxLocatorParamType Type : 8;
			uint Offset : 16;
		} dynamicPropertyDesc[dynamicPropertyCount] <optimize = false, bgcolor = COLOR_MS_RED>; //hidden = true>;

		local uint pmIdx <hidden=true>;
		for (pmIdx = 0; pmIdx < dynamicPropertyCount; pmIdx++)
		{
			if (dynamicPropertyName[pmIdx].hash == 3612282275 || dynamicPropertyName[pmIdx].hash == 1594808049)
				Assert(false, "There's some sort of weirdness. Take a look at mgsvtpp.exe!141b3d9b7.");

			FSeek(startof(this) + dynamicPropertyDesc[pmIdx].Offset);
			
				switch (dynamicPropertyDesc[pmIdx].Type)
				{
				case FX_LOCATOR_PARAM_TYPE_BOOL:
					uint dynamicPropertyValue <bgcolor = COLOR_MS_ONG>; // The encoded bool is ((dynamicPropertyValue >> BitIndex) != 0).
					break;
				case FX_LOCATOR_PARAM_TYPE_FLOAT:
					float dynamicPropertyValue;
					break;
				case FX_LOCATOR_PARAM_TYPE_BYTE:
					ubyte dynamicPropertyValue;
					break;
				case FX_LOCATOR_PARAM_TYPE_INT:
					int dynamicPropertyValue;
					break;
				case FX_LOCATOR_PARAM_TYPE_UINT:
					uint dynamicPropertyValue;
					break;
				case FX_LOCATOR_PARAM_TYPE_STRING:
					StrCode32 dynamicPropertyValue <read=ResolveHashFunc(this)>;
					break;
				default:
					Assert(false);
					break;
				}
		};
	}
	
	if (Flags & FX_LOCATOR_HEADER_FLAGS_USER_RANDOM_SEED) //s10010_s03_FxLocators.vfxlb
    {
		int userRandomSeed;
    }

} FxLocatorCommonHeader;

struct FxLocatorBinaryHeader
{
	char Signature[5]; Assert(Signature == "VFXLB");

	byte Version;

	ushort LocatorCount <fgcolor = COLOR_MS_RED>;
	ushort GroupCount <fgcolor = COLOR_MS_BLU>;

	uint LocatorOffsets[LocatorCount] <fgcolor = COLOR_MS_RED>;
	uint GroupOffsets[GroupCount] <fgcolor = COLOR_MS_BLU>;
} Header <bgcolor = COLOR_MS_BLK, hidden = true>;

if (Header.LocatorCount > 0)
{
	local uint lcIdx <hidden=true>;
	for (lcIdx = 0; lcIdx < Header.LocatorCount; lcIdx++)
	{
		FSeek(10 + 4*(Header.LocatorCount + Header.GroupCount) + Header.LocatorOffsets[lcIdx]);
		
		FxLocatorCommonHeader LocatorData <bgcolor = COLOR_MS_RED>;
	};
}

if (Header.GroupCount > 0)
{
	local uint gpIdx <hidden=true>;
	for (gpIdx = 0; gpIdx < Header.GroupCount; gpIdx++)
	{
		FSeek(10 + 4*(Header.LocatorCount + Header.GroupCount) + Header.GroupOffsets[gpIdx]);
		
		FxLocatorCommonHeader LocatorGroup <bgcolor = COLOR_MS_BLU>;
	};
}
