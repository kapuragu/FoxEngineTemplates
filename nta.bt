//NTA - NavTacticalAction File
//Based on youarebritish's documentation, by RLC
//https://metalgearmodding.fandom.com/wiki/NTA

//Coolors
#define SpringGreen 0x8DFC5E
#define ElectricBlue 0xF3F98E
#define PaleCerulean 0xDFBE93
#define VioletBlueCrayola 0xD17783
#define OldLavender 0x725A6D

#include "common/common.bt"

string ResolveHashFunc32(StrCode32& hash)
{
	switch (hash.hash)
	{
	case 1277978017: return "StepOn";
	case 1139911476: return "StepDown";
	case 2317903572: return "LadderUp";
	case 3049138984: return "LadderDown";
	case 3451056519: return "Door";
	case 504469101: return "StepFence";
	case 0: return "0";
	case 3205930904: return "";
	case 504835594:
	default:
        Printf(Str("\n%u",hash.hash));
        return "Unknown";
	}
}

struct NtaHeader 
{
    char Signature[4];
    ushort Version; Assert(Version == 1);
    ushort WorldCount;
    uint WorldsOffset;
} Header <bgcolor = SpringGreen, hidden=true>;

local uint offset = Header.WorldsOffset;

local uint i = 0;
local uint j;
local uint rewindPos;
for (i = 0; i < Header.WorldCount; i++)
{
    FSeek(offset);

    struct NtaWorld
    {
        StrCode Name; // Main Nav world name is just ""

        uint ActionCount <hidden=true>;
        uint ActionsOffset <hidden=true>;
        uint ActionNameOffset <hidden=true>;
        uint NextOffset <hidden=true>;
        
        FSeek(offset + ActionsOffset);
        for (j = 0; j < ActionCount; j++)
        {
            struct GkTacticalAction
            {
                rewindPos = FTell();
                FSeek(offset + ActionNameOffset + j * sizeof(StrCode));
                StrCode ActionName <bgcolor = VioletBlueCrayola>;
                FSeek(rewindPos);

                struct GkTacticalActionWaypoint
                {
                    Vector3 Position <fgcolor = PaleCerulean>;
                    StrCode32 EdgeActionName <read=ResolveHashFunc32>; local string test <hidden=true>; test = ResolveHashFunc32(EdgeActionName);
                } Waypoints[2] <optimize=false>;

                StrCode userId;

                struct Attribute{
                    ushort Human : 1;
                    ushort Vehicle : 1;
                    ushort Large : 1;
                    ushort HumanHighCost : 1;
                    ushort HumanCombat : 1;
                    ushort Horse : 1;
                    ushort WalkerGear : 1;
                    ushort Dog : 1;
                    ushort Animal : 1;
                    ushort Event : 1;
                    ushort Child : 1;
                } attribute;
                
                ushort Padding0 <hidden=true>; Assert(Padding0 == 0);
                uint Padding1 <hidden=true>; Assert(Padding1 == 0);
            } Action <bgcolor = OldLavender, optimize=false>;
        };

        offset += NextOffset;
    } World <bgcolor = ElectricBlue>;
}