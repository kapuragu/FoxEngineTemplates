#include "common/common.bt"
#include "common/gr_terrain_common.bt"

typedef struct
{
	local uint flags = parentof(this).Flags;

	local string name = ReadFoxDataName(parentof(this).Name);
	local uint dataSize = parentof(this).DataSize;

	// In V3 files, the file structure is completely mangled. It starts with editParam, which has a sane NextNodeOffset and a ChildOffset that points all the way to the end at configrationIds.
	// But very node between editParam and configrationIds (lodParameter, maxHeight, minHeight, materialIds) have sane Next/PreviousNodeOffsets *and* all have ParentNodeOffsets that point to editParam.
	// It's not clear if we should consider every node as flat or that configrationIds, lodParameter, maxHeight, minHeight, materialIds are all childs of editParam in a list that goes backwards.
	// Only one can actually be true, this version has both. Not clear in which way the Fox bug lies.

	// The size/sizeof(type)s are hacks. The actual file uses the LayoutDescription struct.
	switch (name)
	{
	case "heightMap":
		Assert(Header.Version == 3 ? (flags == 0) : (flags == 0));

		// Hack. In V3 files, both the weightMap and heightMap are named "heightMap"
		if (GetFoxDataNodeParamIndex(parentof(this), "pitch") > -1)
		{
			struct
			{
				float data[dataSize / sizeof(float)];
			} HeightMap <bgcolor = 0x99aacc>;
		}
		else
		{
			Assert(Header.Version == 3);

			struct
			{
				Pixel data[dataSize / sizeof(Pixel)];
			} WeightMap <bgcolor = 0x111199>;
		}
		break;
	case "comboTexture":
		Assert(Header.Version == 4 && flags == 1);

		struct
		{
			Pixel data[dataSize / sizeof(Pixel)];
		} ComboTexture <bgcolor = 0x111199>;
		break;
	case "editParam":
		Assert(Header.Version == 3 ? (flags == 0) : (flags == 3));
		break;
	case "lodParameter":
		Assert(Header.Version == 3 ? (flags == 0) : (flags == 2));

		struct
		{
		} LodParameter <bgcolor = 0x00aaff>;
		break;
	case "maxHeight":
		Assert(Header.Version == 3 ? (flags == 0) : (flags == 4));

		struct
		{
			float data[dataSize / sizeof(float)];
		} MaxHeight <bgcolor = 0xff00aa>;
		break;
	case "minHeight":
		Assert(Header.Version == 3 ? (flags == 0) : (flags == 3));

		struct
		{
			float data[dataSize / sizeof(float)];
		} MinHeight <bgcolor = 0xaaff00>;
		break;
	case "materialIds":
		Assert(Header.Version == 3 ? (flags == 0) : (flags == 5));

		struct
		{
			Pixel data[dataSize / sizeof(Pixel)];
		} MaterialIds <bgcolor = 0x991111>;
		break;
	case "configrationIds":
		Assert(Header.Version == 3 ? (flags == 0) : (flags == 6));

		struct
		{
			uint data[dataSize / sizeof(uint)];
		} ConfigrationIds <bgcolor = 0x119911>;
		break;
	case "patchDescription":
		Assert(Header.Version == 4 && flags == 9);

		struct
		{
			uint64 UnknownA;
			uint64 UnknownB;

			uint UnknownC; Assert(UnknownC == 1);
			
			uint PatchOffset <hidden = true>;

			FSeek(startof(this) + 0x14 + PatchOffset);

			_Patch Patch;

			FAlign(16);
		} PatchDescription <bgcolor = 0x999900>;
		break;
	default:
		Assert(false, "Unknown node");
	}
} HTRE;

#define FOX_DATA_PAYLOAD HTRE

#include "common/FoxData_common.bt"

FoxDataHeader Header;
Assert(Header.Version == 3 || Header.Version == 4);

FSeek(Header.NodesOffset);

FoxDataNodes Nodes;