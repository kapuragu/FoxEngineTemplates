LittleEndian();

#include "common/common.bt"

/* Color defines. */
#define COLOR1 0xA7D6E4
#define COLOR2 0x4CB4E9
#define COLOR3 0x15299B
#define COLOR4 0xA7A250
#define COLOR5 0xF9FC90
#define COLOR6 0x85CD7D
#define COLOR7 0x3B53CD
#define COLOR8 0xA57422

/* Node type hash defines. */
#define StrCode32_UiEventNode 1566827328
#define StrCode32_UiPageNode 2327456298
#define StrCode32_UiPhaseNode 909234960
#define StrCode32_UiActionNode 3565552990
#define StrCode32_UiOperationNode 1439661161

/* UiEventNode type hashes. */
#define StrCode32_UiEventNode_EquipUnknown1 3448827577
#define StrCode32_UiEventNode_EndingUnknown1 3718746465
#define StrCode32_UiEvTriggerNode 387457081
#define StrCode32_UiEvScriptNode 1132904100
#define StrCode32_EvSubtitlesNode 2835314347

#define StrCode32_DemoPauseEvCallNode 693978763
#define StrCode32_ActionIconEvCallNode 2064477394
#define StrCode32_WorldMarkerEvCallNode 2755355081
#define StrCode32_EquipCrossEvCallNode 3448827577
#define StrCode32_CqcIconEvCallNode 1570974952
#define StrCode32_SaveLoadEvCallNode 3419581678
#define StrCode32_DisplayTimerEvCallNode 2490646102
#define StrCode32_WalkmanEvCallNode 3493125727
#define StrCode32_TimeCigaretteEvCallNode 822423478
#define StrCode32_EulaEvCallNode 3540561745
#define StrCode32_KeySettingEvCallNode 553707658
#define StrCode32_NoticeDirEvCallNode 1029062350
#define StrCode32_DamageDirEvCallNode 1335296452
#define StrCode32_HeadMarkMarkerEvCallNode 2794031067
#define StrCode32_GameOverEvCallNode 3811152451

/* UiActionNode type hashes. */
#define StrCode32_UiActionNode_PhaseUnknown1 1640419221
#define StrCode32_UiActDisplayNode 4161305626
#define StrCode32_UiActScriptNode 3936517678
#define StrCode32_UiActAnimationNode 3355990556
#define StrCode32_UiActTextureNode 762754712
#define StrCode32_UiActTransformNode 1212229654
#define StrCode32_UiActColorNode 3526460790
#define StrCode32_UiActFadeSceneNode 2481144418
#define StrCode32_UiActPageChangeNode 1618112073
#define StrCode32_UiActPhaseChangeNode 1516971955
#define StrCode32_UiActSoundNode 1132903556
#define StrCode32_UiActSendTriggerNode 594098297
#define StrCode32_UiActSetTextNode 2414984170
#define StrCode32_UiActColorGroupNode 1655745168
#define StrCode32_UiActPriorityNode 1459057519
#define StrCode32_UiActAddWindowNode 460711256
#define StrCode32_UiActConnectComponentNode 2964015700

#define StrCode32_MbCommonPopupActNode 3661971897

/* UiOperationNode type hashes. */
#define StrCode32_UiOpeOrNode 3628566006
#define StrCode32_UiOpeGetPropertyNode 4260229017

/* Other defines. */
#define INVALID_INDEX 65535
#define INVALID_OFFSET 4294967295

/* bruteforced */
#define StrCode32_size 2189895956
#define StrCode32_PopupEvCallNode 1402779846
#define StrCode32_MbLogViewerEvNode 1463586027
#define StrCode32_MbTitleEvNode 1548172620
#define StrCode32_MbConstrainTopActNode 1640419221
#define StrCode32_FailTelopEvNode 1794595086
#define StrCode32_LoadingTipsEvNode 2068898648
#define StrCode32_TelopStartTitleEvCallNode 2209625524
#define StrCode32_GamePauseMenuActNode 2322539195
#define StrCode32_MbDvcManageEvNode 3289094937
#define StrCode32_MbCommonKeyHelpEvNode 3650117291
#define StrCode32_TppEndingEvNode 3718746465
#define StrCode32_TypingLogActNode 376885743
#define StrCode32_MbTopMenuSelectorEvNode 4218853920

local uint layoutLinksRead;

struct Header
{
    char uigb[4] <hidden=true>;
    ubyte magic <hidden=true>;
    Assert(magic == 1);    
    enum <ubyte> Version
    {
        GZ=0,
        TPP=1,
    } version;

    ushort padding <hidden=true>;
    Assert(padding == 0);

    ushort nodeCount;

    ubyte uilbCount;
    ubyte uigbCount;
    ubyte StrCodeCount;                   // Number of o2 entries
    if (version==TPP)
    {
        Assert(StrCodeCount == 0);
    }

    ubyte section6EntryCount;

    ushort PathCode64Count;
    if (version==TPP)
    {
        uint StrCode32Count;
    }

    int nodeTableOffset;
    int layoutTableOffset;
    int section4Offset;
    if (version==TPP)
    {
        int o2;                    // Relates to fileReferenceCount and section6Offset
        int section6Offset;         // Only used in GZ? (Nope, it's used in SubtitlesSideshow.uigb)
    //    Assert(section6Offset == -1);
    }

    if (version==GZ)
    {
        int StrCodesRelativeOffset;       // Offset from BuffersSectionOffset
    }
    else if (version==TPP)
    {
        int PathCode64sRelativeOffset;       // Offset from BuffersSectionOffset
        uint StrCode32sRelativeOffset;       // Offset from BuffersSectionOffset 
    }
    int StringsRelativeOffset;                     // Offset from BuffersSectionOffset; more hashes (uifs?)
    if (version==TPP)
    {
        Assert(StringsRelativeOffset == -1);
    }

    int BuffersSectionOffset;
} header <bgcolor = COLOR1>;

enum <ubyte> UiActionNodeKind
{
    ACTION_NONE = 0,
    ACTION_DISPLAY = 1,
    ACTION_ANIMATION = 2,
    ACTION_TRANSFORM = 3,
	ACTION_COLOR = 4,
	ACTION_TEXTURE = 5,
	ACTION_FADE_SCENE = 6,
	ACTION_PAGE_CHANGE = 7,
	ACTION_PHASE_CHANGE = 8,
	ACTION_SCRIPT = 9,
	ACTION_CHAIN_LIST = 10,
	ACTION_SOUND = 11,
	ACTION_SENDTRIGGER = 12,
	ACTION_SET_TEXT = 13,
	ACTION_COLOR_GROUP = 14,
	ACTION_PRIORITY = 15,
	ACTION_ACTADDWINDOW = 16,
	ACTION_ACTREMOVEWINDOW = 17,
    ACTION_CONNECTCOMPONENT = 18
};

enum <uint> UiEventNodeKind
{
    EVENT_NONE = 0,
	EVENT_PRESS = 1,
	EVENT_LONG_PRESS = 2,
	EVENT_RELEASE = 3,
	EVENT_TIMER = 4,
	EVENT_SCRIPT = 5,
	EVENT_SELECTION = 6,
	EVENT_SELECT = 7,
	EVENT_SELECT_LIST = 8,
	EVENT_TRIGGER = 9,
    EVENT_EVCONTROLLER = 10
};

struct UiPageNode
{
    // None of these are read?
    ushort o1;
    ushort o2;
    ushort o3;
};

struct UiEdgeData
{
    ushort inputNodeNameHashIndex <comment=GetStrCode32Comment>;

    // Values found: "func", "start"
    ushort propertyNameHashIndex1 <comment=GetStrCode32Comment>;

    // Values found: "event", "param", "end"
    // Only used when linking a UiActionNode to UiEventNode?
    ushort propertyNameHashIndex2 <comment=GetStrCode32Comment>;
    ushort n3;
};

struct UiOutputEdgeData
{    
    ushort nodeNameHash <comment=GetStrCode32Comment>;

    // Example: "start", "stop"
    ushort hashIdx1 <comment=GetStrCode32Comment>;

    // Examples: "event"
    ushort hashIdx2 <comment=GetStrCode32Comment>;

    // Never read?
    ushort nodeName2Hash;
};

struct LayoutLink
{
    ushort hashIndex1;
    ushort hashIndex2;
};

typedef struct
{
    // This is the hashed name of a .uilb (e.g., UI_demo_provisional 2238145568)
    // Might also be a .uia
    // Note: Somewhere in the hash list is the hashed name of all .uilbs, .uifs, and .uias referenced in the .uilbs!
    ushort fileNameHashIndex;
    
    // If n1 == 2, then skip the rest of the struct (TODO)
    // Other valid values are 1 and 0
    // The type indicates something to be done with the file
    ubyte type;

    // Number of hashes
    ubyte hashCount;

    // This is an offset from BuffersSectionOffset
    ushort hashIndicesOffset;

    // Never read?
    ushort u4;
    Assert(u4 == 0);
} FileReference <optimize = true>;

/* UiPhaseNodes receive input from UiPageNodes. */
struct UiPhaseNode
{
    ubyte kind;
    ubyte edgeCount;
    ushort edgesOffset;

    local uint currentPosition = FTell();

    FSeek(edgesOffset);
    UiEdgeData inputEdge[edgeCount] <bgcolor = COLOR7>;
    FSeek(currentPosition);

    // Not read?
    ushort o3;
    Assert(o3 == 0);
};

/* UiEventNodes receive input from UiPhaseNodes. */
struct UiEventNode
{
    ubyte inputOperationCount;
    ubyte outputEdgeCount;
    uint outputEdgesOffset;

    local uint currentPosition = FTell();

    FSeek(outputEdgesOffset);
    UiEdgeData inputEdges[outputEdgeCount] <bgcolor = COLOR7>;
    FSeek(currentPosition);

    ubyte layoutLinkCount;

    currentPosition = FTell();
    FSeek(header.BuffersSectionOffset + layoutLinksRead);
    LayoutLink layoutLinks[layoutLinkCount];
    layoutLinksRead += layoutLinkCount;
    FSeek(currentPosition);

    ubyte paramBytes;

    ushort padding <hidden=true>;
    Assert(padding == 0);

    uint layoutLinks2Offset;   
    uint paramsOffset;

    currentPosition = FTell();
    FSeek(header.BuffersSectionOffset + paramsOffset); //reads into strcode hashes in GZ, title_25th_demo_in_world
    ubyte params[paramBytes];
    FSeek(currentPosition);

    uint o6;
    uint o7;
    UiEventNodeKind kind;
};

struct UiEventNode_EquipUnknown1
{
    UiEventNode base;
};

struct UiEventNode_EndingUnknown1
{
    UiEventNode base;
};

/* UiEventNodes receive input from UiEventNodes. */
struct UiActionNode
{
    UiActionNodeKind kind;
    ubyte outputEdgeCount;
    uint outputEdgesOffset;

    local uint currentPosition = FTell();

    FSeek(outputEdgesOffset);
    UiEdgeData inputEdges[outputEdgeCount] <bgcolor = COLOR7>;
    FSeek(currentPosition);

    ubyte layoutLinkCount;

    currentPosition = FTell();
    FSeek(header.BuffersSectionOffset + layoutLinksRead * sizeof(LayoutLink));
    LayoutLink layoutLinks[layoutLinkCount];
    layoutLinksRead += layoutLinkCount;
    FSeek(currentPosition);

    ubyte paramBytes;
    ubyte hashIndicesCount; // Only hash value found so far is ""
    //Assert(hashIndicesCount == 0);

    // Probably relates to an undiscovered section. Found in exe.
    ubyte o7EntryCount;
    Assert(o7EntryCount == 0);

    uint layoutLinks2Offset;
    uint paramOffset; // Seems to be offset from section5. Read paramBytes from here.

    currentPosition = FTell();
    if (layoutLinks2Offset != INVALID_OFFSET)
    {
        Assert(layoutLinkCount > 0);
        FSeek(layoutLinks2Offset);
        FileReference fileReferences[layoutLinkCount];
    }

    // TODO: Do this for all node types!
    // TODO2: This is always an 8 byte value
    if (paramOffset != INVALID_OFFSET)
    {
        FSeek(header.BuffersSectionOffset + paramOffset);
        ubyte params[paramBytes];
    }

    FSeek(currentPosition);

    uint hashIndicesOffset; // Offset from section5
    uint o7;
    uint o8;
    //Assert(o8 == 0); //gets set off in demo_pause GZ and TPP

    uint o9;//offset to whatever entry above is a count of

    currentPosition = FTell();
    FSeek(outputEdgesOffset);
    UiOutputEdgeData outputEdges[outputEdgeCount] <bgcolor = COLOR7>;
    FSeek(currentPosition);
};

struct UiOperationNode
{
    // Not what this is. What is it? Sometimes as high as 9.
    ubyte inputOperationCount;
    ubyte outputEdgeCount;
    uint outputEdgesOffset;

    local uint currentPosition = FTell();

    FSeek(outputEdgesOffset);
    UiEdgeData inputEdges[outputEdgeCount] <bgcolor = COLOR7>;
    FSeek(currentPosition);

    ubyte layoutLinkCount;

    currentPosition = FTell();
    FSeek(header.BuffersSectionOffset + layoutLinksRead);
    LayoutLink layoutLinks[layoutLinkCount];
    layoutLinksRead += layoutLinkCount;
    FSeek(currentPosition);

    ubyte paramBytes;

    ushort padding <hidden=true>;
    Assert(padding == 0);

    uint layoutLinks2Offset;   
    uint paramsOffset;

    currentPosition = FTell();
    FSeek(header.BuffersSectionOffset + paramsOffset);
    ubyte params[paramBytes];
    FSeek(currentPosition);

    uint o6;
    uint o7;
};

struct UiActionNode_PhaseUnknown1
{
    UiActionNode base;
};

struct UiActionNode_Unknown1
{
    UiActionNode base;
};

enum <ubyte> UiNodeType
{
    NODE_PAGE = 0,
    NODE_PHASE = 1,
    NODE_EVENT = 2,
    NODE_ACTION = 3,
    NODE_OPERATION = 4,
    NODE_UNKNOWN = 5,
    NODE_COMPOUND = 6
};

struct UiNodeData
{
    ushort nodeTypeHashIndex <comment=GetNodeTypeComment, fgcolor = 0xFFFFFF>;
    ushort nodeNameHashIndex <comment=GetStrCode32Comment>;

    ubyte nodeSzeInBytes;
    UiNodeType type;

    if (header.version==GZ)
    {
        local uint nodeTypeHash = GetStrCode(nodeTypeHashIndex);
    }
    else if (header.version==TPP)
    {
        local uint nodeTypeHash = GetStrCode32(nodeTypeHashIndex);
    }

    switch(type)
    {
        case NODE_PAGE:
            UiPageNode pageNode;
            break;
        case NODE_PHASE:
            UiPhaseNode phaseNode;
            break;
        case NODE_EVENT:
            UiEventNode eventNode;
            break;
        case NODE_ACTION:
            UiActionNode actionNode;
            break;
        case NODE_OPERATION:
            UiOperationNode operationNode;
            break;
        default:
            Printf("Unrecognized node type: %u\n", nodeTypeHash);
            Assert(false);
    }
} nodes [header.nodeCount] <bgcolor = COLOR2, optimize=false>;

if (header.layoutTableOffset>0)
{
    FSeek(header.layoutTableOffset);
    
    struct UiLayoutData
    {
        ushort hashIndex <comment=GetStrCode32Comment, fgcolor = 0xFFFFFF>;
    
        // Interesting note: these are always 6 apart
        ushort layoutPathHashIndex <comment=GetPathCode64Comment>;
    
        // Boolean; sets some flag in the uilb
        ubyte flag1;
        if (header.version==TPP)
        {
            Assert(flag1 == 0 || flag1 == 1);
        }
    
        // Some kind of index, possibly related to an fmdl?
        ubyte n2;
    
        // Values found: LMENU (equip_cross.uigb)
        ushort drawPriorityHashIndex <comment=GetStrCode32Comment>;
    
        // These are in the exe, but no clue what any of them are.
        if (header.version==TPP)
        {
            ushort connectionHashIndex <comment=GetStrCode32Comment>;
            ushort u1 <comment=GetStrCode32Comment>;
        }
    } layouts[header.uilbCount] <optimize = false, bgcolor = COLOR4>;
}

struct Section2Entry
{
    short hashIndex;             // Values include "param"
    ubyte flag; // Valid values are 0 or 1
    ubyte hashCount;
    uint section5RelativeOffset; // Values include "param"
};

/* Relates to external uigb files somehow. */
if (header.section4Offset>0)
{
    FSeek(header.section4Offset);
    struct Section4
    {
        struct Section4Entry
        {
            ushort hashIndex1;      // Some kind of name associated with this entry.
            ushort uigbHashIndex;
    
            ushort n3;
            ushort nameHashIndex;
            ubyte n5;
    
            // TODO: If false, stop reading
            ubyte b6;
            Assert(b6 == 0 || b6 == 1);
    
            ushort hashIndex3;
            uint n8;
            uint section2EntryOffset;
    
            local int64 position = FTell();
            FSeek(section2EntryOffset);
            Section2Entry section2Entry;
            FSeek(position);
    
            Vector4 v1;
            Vector4 v2;
            Vector4 v3;
            Vector4 v4;
        } entries[header.uigbCount] <optimize=false>;
    } section4 <bgcolor = COLOR8, fgcolor = 0xFFFFFF>;
}

if (header.version==GZ)
{
    if (header.StringsRelativeOffset != -1)
    {
	    local ushort stringIndex;
	    for (stringIndex = 0; stringIndex<header.PathCode64Count; stringIndex++)
	    {
            struct StringEntry
            {
                local string str = GetString(stringIndex);
            } stringEntry <bgcolor = 0x856ACE, fgcolor = 0xFFFFFF>;
	    };
    }

    FAlign(8);
    
    if (header.StrCodesRelativeOffset != -1)
    {
	    FSeek(header.BuffersSectionOffset + header.StrCodesRelativeOffset);
	    StrCode StrCode32s[header.StrCodeCount] <bgcolor = 0x75A2FA, fgcolor = 0xFFFFFF>;
    }
}
else if (header.version==TPP)
{
    if (header.StrCode32sRelativeOffset != -1)
    {
	    //Assert(FTell() == header.BuffersSectionOffset + header.StrCode32sRelativeOffset);
	    FSeek(header.BuffersSectionOffset + header.StrCode32sRelativeOffset);
	    StrCode32 StrCode32s[header.StrCode32Count] <bgcolor = 0x75A2FA, fgcolor = 0xFFFFFF>;
    }

    FAlign(8);
    
    if (header.PathCode64sRelativeOffset != -1)
    {
	    Assert(FTell() == header.BuffersSectionOffset + header.PathCode64sRelativeOffset);
	    PathCode64 PathCode64s[header.PathCode64Count] <bgcolor = 0x856ACE, fgcolor = 0xFFFFFF>;
    }
}

/* Get the comment string for a given hash index. */
string GetNodeTypeComment(ushort hashIndex)
{
    local uint hash;
    if (header.version==GZ)
    {
        hash = (uint)GetStrCode(hashIndex);
    }
    else if (header.version==TPP)
    {
        hash = GetStrCode32(hashIndex);
    }
    switch(hash)
    {
        case StrCode32_UiEventNode:
            return "UiEventNode";
        case StrCode32_UiPageNode:
            return "UiPageNode";
        case StrCode32_UiPhaseNode:
            return "UiPhaseNode";
        case StrCode32_UiActionNode:
            return "UiActionNode";
        case StrCode32_UiOperationNode:
            return "UiOperationNode";
        case StrCode32_UiEvTriggerNode:
            return "UiEvTriggerNode";
        case StrCode32_UiEvScriptNode:
            return "UiEvScriptNode";        
        case StrCode32_EvSubtitlesNode:
            return "EvSubtitlesNode";
        case StrCode32_DemoPauseEvCallNode:
            return "DemoPauseEvCallNode";
        case StrCode32_ActionIconEvCallNode:
            return "ActionIconEvCallNode";
        case StrCode32_WorldMarkerEvCallNode:
            return "WorldMarkerEvCallNode";
        case StrCode32_EquipCrossEvCallNode:
            return "EquipCrossEvCallNode";
        case StrCode32_CqcIconEvCallNode:
            return "CqcIconEvCallNode";
        case StrCode32_UiActScriptNode:
            return "UiActScriptNode";
        case StrCode32_SaveLoadEvCallNode:
            return "SaveLoadEvCallNode";
        case StrCode32_DisplayTimerEvCallNode:
            return "DisplayTimerEvCallNode";
        case StrCode32_WalkmanEvCallNode:
            return "WalkmanEvCallNode";
        case StrCode32_TimeCigaretteEvCallNode:
            return "TimeCigaretteEvCallNode";
        case StrCode32_EulaEvCallNode:
            return "EulaEvCallNode";
        case StrCode32_KeySettingEvCallNode:
            return "KeySettingEvCallNode";
        case StrCode32_NoticeDirEvCallNode:
            return "NoticeDirEvCallNode";
        case StrCode32_HeadMarkMarkerEvCallNode:
            return "HeadMarkMarkerEvCallNode";
        case StrCode32_DamageDirEvCallNode:
            return "DamageDirEvCallNode";
        case StrCode32_GameOverEvCallNode:
            return "GameOverEvCallNode";
        case StrCode32_UiActDisplayNode:
            return "UiActDisplayNode";
        case StrCode32_UiActTextureNode:
            return "UiActTextureNode";
        case StrCode32_UiActTransformNode:
            return "UiActTransformNode";
        case StrCode32_UiActColorNode:
            return "UiActColorNode";
        case StrCode32_UiActFadeSceneNode:
            return "UiActFadeSceneNode";
        case StrCode32_UiActPageChangeNode:
            return "UiActPageChangeNode";
        case StrCode32_UiActPhaseChangeNode:
            return "UiActPhaseChangeNode";
        case StrCode32_UiActSoundNode:
            return "UiActSoundNode";
        case StrCode32_UiActSendTriggerNode:
            return "UiActSendTriggerNode";
        case StrCode32_UiActSetTextNode:
            return "UiActSetTextNode";
        case StrCode32_UiActColorGroupNode:
            return "UiActColorGroupNode";
        case StrCode32_UiActPriorityNode:
            return "UiActPriorityNode";
        case StrCode32_UiActAddWindowNode:
            return "UiActAddWindowNode";
        case StrCode32_UiActConnectComponentNode:
            return "UiActConnectComponentNode";
        case StrCode32_UiOpeOrNode:
            return "UiOpeOrNode";
        case StrCode32_UiOpeGetPropertyNode:
            return "UiOpeGetPropertyNode";
        case StrCode32_UiActAnimationNode:
            return "UiActAnimationNode";
        case StrCode32_MbCommonPopupActNode:
            return "MbCommonPopupActNode";
        case StrCode32_size:
            return "size";
        case StrCode32_PopupEvCallNode:
            return "PopupEvCallNode";
        case StrCode32_MbLogViewerEvNode:
            return "MbLogViewerEvNode";
        case StrCode32_MbTitleEvNode:
            return "MbTitleEvNode";
        case StrCode32_MbConstrainTopActNode:
            return "MbConstrainTopActNode";
        case StrCode32_FailTelopEvNode:
            return "FailTelopEvNode";
        case StrCode32_LoadingTipsEvNode:
            return "LoadingTipsEvNode";
        case StrCode32_TelopStartTitleEvCallNode:
            return "TelopStartTitleEvCallNode";
        case StrCode32_GamePauseMenuActNode:
            return "GamePauseMenuActNode";
        case StrCode32_MbDvcManageEvNode:
            return "MbDvcManageEvNode";
        case StrCode32_MbCommonKeyHelpEvNode:
            return "MbCommonKeyHelpEvNode";
        case StrCode32_TppEndingEvNode:
            return "TppEndingEvNode";
        case StrCode32_TypingLogActNode:
            return "TypingLogActNode";
        case StrCode32_MbTopMenuSelectorEvNode:
            return "MbTopMenuSelectorEvNode";
        default:
            return Itoa(hash);
    }
}

/* Get the hash at a given index. */
uint64 GetStrCode(ushort hashIndex)
{
    local uint hashTableOffset = header.BuffersSectionOffset + header.StrCodesRelativeOffset;
    local int64 currentPosition = FTell();

    FSeek(hashTableOffset + sizeof(uint64) * hashIndex);

    local uint64 hash = ReadUInt64();
    FSeek(currentPosition);

    return hash;
}

/* Get the string at a given index. */
string GetString(ushort stringIndex)
{
    local int64 currentPosition = FTell();
    
    FSeek(header.StringsRelativeOffset + (8 * stringIndex));
    
    uint stringSize <hidden=true>;
    uint stringRelativeOffset <hidden=true>;
    
    FSeek(header.BuffersSectionOffset + stringRelativeOffset);

    string retString <hidden=true>;
    FSeek(currentPosition);

    return retString;
}

/* Get the hash at a given index. */
uint GetStrCode32(ushort hashIndex)
{
    local uint hashTableOffset = header.BuffersSectionOffset + header.StrCode32sRelativeOffset;
    local int64 currentPosition = FTell();

    FSeek(hashTableOffset + sizeof(uint) * hashIndex);

    local uint hash = ReadUInt();
    FSeek(currentPosition);

    return hash;
}

/* Get the uilb hash at a given index. */
uint64 GetPathCode64(ushort hashIndex)
{
    local uint hashTableOffset = header.BuffersSectionOffset + header.PathCode64sRelativeOffset;
    local int64 currentPosition = FTell();

    FSeek(hashTableOffset + (sizeof(uint64) * hashIndex));

    local uint64 hash = ReadUInt64();
    FSeek(currentPosition);

    return hash;
}

/* Get the comment string for a given version number. */
string GetVersionComment(ubyte versionNumber)
{
    if (versionNumber == 0)
    {
        return "GZ";
    }
    else if (versionNumber == 1)
    {
        return "TPP";
    }
    else
    {
        return "Unrecognized version";
    }
}

/* Get the comment string for a given hash index. */
string GetStrCode32Comment(ushort hashIndex)
{
    if (hashIndex == INVALID_INDEX)
    {
        return "";
    }

    local uint hash;
    if (header.version==GZ)
    {
        hash = (uint)GetStrCode(hashIndex);
    }
    else if (header.version==TPP)
    {
        hash = GetStrCode32(hashIndex);
    }
    return Itoa(hash);
}

/* Get the comment string for a given uilb hash index. */
string GetPathCode64Comment(ushort hashIndex)
{
    if (hashIndex == INVALID_INDEX)
    {
        return "";
    }

    local uint64 hash = GetPathCode64(hashIndex);
    return Ltoa(hash);
}

/* Converts an unsigned integer to a string. */
string Itoa(uint number)
{
    char result[12];
    SPrintf(result, "%u", number);
    return result;
}

/* Converts an unsigned long to a string. */
string Ltoa(uint64 number)
{
    char result[24];
    SPrintf(result, "%Lu", number);
    return result;
}
